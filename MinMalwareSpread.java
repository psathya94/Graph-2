
import java.util.Arrays;

//TC - O(n^2)
//SC - O(N)
//https://leetcode.com/problems/minimize-malware-spread/
class Solution34 {
  public int minMalwareSpread(int[][] graph, int[] initial) {
      int groupNo = 0;
      int[] group = new int[graph.length];
      Arrays.fill(group, -1);
      int color = 0;
      // 1. Assign group no to each node
      for (int i = 0; i < graph.length; i++) {
          if (group[i] == -1) {
              dfs(graph, group, color, i);
              color++;
          }
      }

      // 2. Calculate total no.of nodes in each group
      int[] totalNodes = new int[color];
      for (int i = 0; i < group.length; i++) {
          int gNo = group[i];
          totalNodes[gNo]++;
      }

      // 3. Calculate infected no.of nodes in each group
      int[] infected = new int[color];
      for (int i = 0; i < initial.length; i++) {
          int node = initial[i];
          infected[group[node]]++;
      }

      // 4. Go over initial no.of nodes
      int result = Integer.MAX_VALUE;
      int Maxsaved = 0;
      for (int i = 0; i < initial.length; i++) {
          int node = initial[i]; // 5
          int g = group[node]; // 0
          if (infected[g] == 1) {
              int saved = totalNodes[g];
              if (saved > Maxsaved) {
                  result = node;
                  Maxsaved = saved; // dont forget
              } else if (saved == Maxsaved) {
                  result = Math.min(result, node);
              }
          }
      }
      if (result == Integer.MAX_VALUE) {
          for (int i = 0; i < initial.length; i++) {
              result = Math.min(result, initial[i]);
          }
      }
      return result;
  }

  private void dfs(int[][] graph, int[] group, int color, int i) {
      // base
      if (group[i] != -1)
          return;
      // logic
      group[i] = color;
      for (int j = 0; j < graph.length; j++) {
          if (graph[i][j] == 1) { // connected
              dfs(graph, group, color, j);
          }
      }
  }
}

/**
* 1. Assign group no to each node
* 2. Calculate total no.of nodes in each group
* 3. Calculate infected no.of nodes in each group
*/
public class MinMalwareSpread {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
